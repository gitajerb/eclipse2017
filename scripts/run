#!/bin/bash
#
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ENV local-dev will run a load balancer emulator nginx process

# CMD kill:             kills any running containers
# CMD clean:            cleans up any existing docker images
# CMD create_secret:    creates TLS secret for HTTPS
# CMD build:            builds docker images for current environment, not including system test container(s).
# CMD push:             pushes built docker images to gcloud container registry for ENV, not including system test container(s).
# CMD deploy:           deploys eclipse site to ENV.
# CMD teardown:         tears down eclipse deployment from ENV. Does not delete ingress (load balancer).
# CMD unittest:         runs all unit tests.
# CMD systest:          runs system tests in ENV.
# CMD creds:            obtains credentials for ENV.

set -e

function array_contains() {
  local i
  for i in "${@:2}"; do
    if [[ $(echo $i | sed -e 's/,$//') == $1 ]]; then
      return 0
    fi
  done
  return 1
}

# Set to true to build, push, deploy, teardown unreleased servers
export UNRELEASED=false

CMDLIST=("kill", "clean", "create_secret", "build", "push", "deploy", \
         "update", "teardown", "unittest", "systest", "creds")
DEPLOYMENTLIST=("static-nginx", "geo")

APPLIST=("base-container", "app-container", "nginx-container", "static-nginx", \
         "geo-server", "geo-nginx", \
         "datastore-emulator", "nginx-lb-emulator", \
         "test-container", "system-test-container")
ENVLIST=("local-dev", "dev", "test", "prod")

USAGE="usage: ./run CMD ENV <OPTIONAL APP> or ./run update ENV DEPLOYMENT APP"
VALID_CMD="Valid values for CMD are [$(printf "|%s" "${CMDLIST[@]}" | sed -e 's/,//g' -e 's/^|//')]"
VALID_ENV="Valid values for ENV are [$(printf "|%s" "${ENVLIST[@]}" | sed -e 's/,//g' -e 's/^|//')]"
VALID_APP="Valid values for APP are [$(printf "|%s" "${APPLIST[@]}" | sed -e 's/,//g' -e 's/^|//')]"
VALID_DEPLOYMENT="Valid values for DEPLOYMENT are [$(printf "|%s" "${DEPLOYMENTLIST[@]}" | sed -e 's/,//g' -e 's/^|//')]"

MB_ZEROS=000000

if [[ $# != 2 ]] && [[ $# != 3 ]] && [[ $# != 4 ]]; then
    echo $USAGE; echo $VALID_CMD; echo $VALID_ENV; echo $VALID_APP; echo If CMD is update, $VALID_DEPLOYMENT
    exit 1
fi

export CMD=$1
export TARGET_ENV=$2
if [ "$CMD" != "update" ]; then
    export APP=$3
else
    export DEPLOYMENT=$3
    export APP=$4
fi

# Process CMD value
if array_contains $CMD "${CMDLIST[@]}"; then
    SCRIPT="_$CMD"
elif [[ $CMD = "creds" ]]; then
    SCRIPT=""
else
    echo "Unsupported CMD value: $CMD"
    echo $VALID_CMD
    exit 1
fi

# Process ENV value
# TODO different environment for local-dev
if [[ $TARGET_ENV = local-dev ]]; then
    # We set target_env to dev so that dev secret files are used
    TARGET_ENV="dev"
    export LOCAL_DEV="true"
    GCLOUD_PROJ_PREFIX=""
    GCLOUD_PROJ="eclipse-2017-dev-$USER"

elif [[ $TARGET_ENV = test ]]; then
    GCLOUD_PROJ_PREFIX=""
    GCLOUD_PROJ="eclipse-2017-test-147301"

elif [[ $TARGET_ENV = dev ]]; then
    GCLOUD_PROJ_PREFIX=""
    GCLOUD_PROJ="eclipse-2017-dev-$USER"

elif [[ $TARGET_ENV = stage ]]; then
    GCLOUD_PROJ_PREFIX=""
    GCLOUD_PROJ="eclipse-2017-stage"

elif [[ $TARGET_ENV = prod ]]; then
    GCLOUD_PROJ_PREFIX=""
    GCLOUD_PROJ="eclipse-2017-prod"

else
    echo "Only $(printf " %s" "${APPLIST[@]}" | sed -e 's/^\ //') environments currently supported."
    exit 1
fi

if [[ $CMD = test ]] && [[ $TARGET_ENV != dev ]]; then
    echo "Only dev environment currently supported for test CMD"
    exit 1
fi


# Resource allocations
if [[ $CMD = systest ]]; then
    UPLOAD_SERVER_RSS_MAX_USAGE_MB=200
    PENDING_UPLOADS_MAX_USAGE_MB=500
    PRE_SCRIPT="_build"
else
    UPLOAD_SERVER_RSS_MAX_USAGE_MB=1000
    PENDING_UPLOADS_MAX_USAGE_MB=10000
fi

export UPLOAD_SERVER_RSS_MAX_USAGE_BYTES=$UPLOAD_SERVER_RSS_MAX_USAGE_MB$MB_ZEROS
export PENDING_UPLOADS_MAX_USAGE_BYTES=$PENDING_UPLOADS_MAX_USAGE_MB$MB_ZEROS
export UPLOAD_SERVER_TOTAL_MAX_USAGE_MB=$(expr $UPLOAD_SERVER_RSS_MAX_USAGE_MB + $PENDING_UPLOADS_MAX_USAGE_MB)


# make sure the app is in $APPLIST or empty (all)
if ! array_contains $APP "${APPLIST[@]}" && [[ $CMD != update ]]; then
    if [[ $APP != "" ]]; then
      echo "Unsupported APP value: "$APP""
      echo $VALID_APP
      exit 1
    fi
fi

export PROJ_DIR=$(dirname $(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd ))
export PROJECT_ID="$GCLOUD_PROJ_PREFIX${GCLOUD_PROJ_PREFIX:+":"}$GCLOUD_PROJ"

export SED_SAFE_PROJECT_ID=$(echo $PROJECT_ID | sed -e 's:\::\\\::g')
export GCLOUD_PROJ_PREFIX
export GCLOUD_PROJ

export GIT_TAG=$(git rev-parse --short HEAD)

if [[ $LOCAL_DEV != true ]]; then
  # Set gcloud project id and get cluster credentials for kubernetes
  gcloud config set project $PROJECT_ID
  gcloud container clusters get-credentials eclipse
fi

if [[ -n $SCRIPT  && -f $PROJ_DIR/scripts/$SCRIPT ]]; then
  bash -x $PROJ_DIR/scripts/$SCRIPT $1
fi
